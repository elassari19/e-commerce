// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  expires      DateTime @db.Date
  sessionToken String
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  role      String?
  name      String?
  email     String    @unique
  password  String
  image     String?
  code      String
  city      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
  Product   Product[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  category      String
  brand         String?
  name          String
  description   String
  imageUrl      String[]
  price         String
  stock         String
  isCoice       Boolean
  isFreeChiping Boolean
  size          String[]
  color         String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  User          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?  @db.ObjectId
}
