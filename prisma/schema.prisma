// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  expires      DateTime @db.Date
  sessionToken String
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  role      String?    @default("user")
  firstName String?
  lastName  String?
  gender    Gender?
  age       String?
  email     String     @unique
  password  String?
  phone     String?
  birthDate DateTime?
  address   Address?
  bank      Bank?
  image     ImageUrl[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  accounts  Account[]
  sessions  Session[]
  product   Product[]
  category  Category[]
  reviews   Reviews[]
}

model Bank {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  cardName   String?
  cardExpire String?
  cardNumber String?
  cardType   String?
  currency   String?
  iban       String?
  User       User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String? @unique @db.ObjectId
}

model Address {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  address    String?
  city       String?
  lat        String
  lng        String
  postalCode String?
  state      String?
  User       User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String? @unique @db.ObjectId
}

enum Gender {
  male
  female
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  brand       String?
  name        String
  slug        String       @unique
  description String
  images      ImageUrl[]
  price       String
  reviews     Reviews[]
  quantity    String
  properties  Properties[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?      @db.ObjectId
  Category    Category?    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String?      @db.ObjectId
}

model Properties {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?  @db.ObjectId
}

model Reviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.ObjectId
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model ImageUrl {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  public_id  String
  secure_url String
  color      String?
  quantity   String?
  createdBy  String?
  Product    Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String?  @db.ObjectId
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?  @db.ObjectId
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String    @unique
  description String
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]
  User        User?     @relation(fields: [userId], references: [id])
  userId      String?   @db.ObjectId
}

// npx prisma generate
// npx prisma db push
